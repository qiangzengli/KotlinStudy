1函数重载

只能通过形参列表来判断是不是重载
  形参个数不同
  形参类型不同


  如果重载参数中含有可变参数  编译器会自动寻找最精确的方法 ，并且 在重载中不推荐使用可变参数

2 局部函数（默认情况在封闭函数内有效 单可以返回出去）


    示例：

    println(getMathFun("cube", 3))
    println(getMathFun("square", 3))
    println(getMathFun("", 5))


    fun getMathFun(type: String, n: Int): Int {
        //计算平方
        fun squre(n: Int): Int = n * n

        //计算立方
        fun cube(n: Int): Int = n * n * n

        //计算阶乘
        tailrec fun fact(n: Int, total: Int = 1): Int =
            if (n == 1) total else fact(n - 1, n * total)


        when (type) {

            "square" -> return squre(n)
            "cube" -> return cube(n)
            else -> return fact(n)
        }
    }



 3  高阶函数  （Kotlin不是完全面向对象的 函数也是一等公民，因此函数本身也有类型）

    函数的类型也可以定义变量  作为函数的形参 以及返回值类型


    使用高阶函数

    函数类型语法：(形参列表)->返回值类型（如果是Unit 可以省略->Unit）



        示例：

          var a = ::pow
            //
            var b = ::area


            println(a(2, 3))
            println(b(2, 3))




    4 使用函数类型作为形参类型


    案例：


    fun squre(i: Int) = i * i
    fun cube(i: Int) = i * i * i
    fun fact(i: Int): Int {

        if (i == 1) {
            return 1
        } else {
            return i * fact(i - 1)
        }


    }


     var array = arrayOf(1, 2, 3, 4)

        println(map(array, ::cube).contentToString())
        println(map(array, ::squre).contentToString())
        println(map(array, ::fact).contentToString())





5   使用函数类型作为返回值

示例：

fun getMathFun1(type: String): (Int) -> Int {
    //计算平方
    fun squre(n: Int): Int = n * n

    //计算立方
    fun cube(n: Int): Int = n * n * n

    //计算阶乘
    tailrec fun fact(n: Int, total: Int = 1): Int =
        if (n == 1) total else fact(n - 1, n * total)


    when (type) {

        "square" -> return ::squre
        "cube" -> return ::cube
        else -> return ::fact
    }
}






    println(getMathFun1("cube")(3))







