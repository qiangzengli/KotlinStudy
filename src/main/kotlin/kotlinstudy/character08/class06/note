对象表达式和对象声明

1 对象表达式

语法：

    object[: 0-N个父类型]{
    //对象表达式的类体部分

    }


    从语法可以看出，对象表达式可以制定0~N 个父类型，对象表达式
    的本质就是增强版的匿名内部类。


    对象表达式的规则：

    1 对昂表达式不能是抽象类，因为系统在创建对象表达式时会立即创建对象。因此
    不允许将对象表达式定义成抽象类
    2 对象表达式不能定义构造器。但对象表达式可以定义初始化块，可以通过初始化块完成
    构造器需要完成的事情。
    3 对象表达式可以包含内部类,不能包含嵌套类

示例：


fun main() {


    var ob1 = object : Outputable {


        override fun test() {

        }


    }


    var ob2 = object {
        //初始化块
        init {
            println("初始化块")
        }


        //只能包含内部类，不能包含嵌套类
        inner class A {
            fun hello() {
                println("hello A")
            }

        }
    }

    ob2.A().hello()

}



 对象表达式在方法（或函数） 的局部范围内，或使用private修饰的对象表达式，
Kotlin 编译器可识别对象表达式的真是类型，
 非private修饰的对象表达式与java的匿名内部类相似



总结： 对象表达式与java的匿名内部类


 对象表达式可以指定多个父类型
 Kotlin编译器能准确识别局部范围内private 对象表达式的类型
 对象表达式可访问或修改其所在范围内的局部变量





2 对象声明和单例



对象声明的语法：

object ObjectName[:0~N 个父类型]{

}


与对象表达式的声明上的区别在于有没有名字

与对象表达式的区别

    对象表达式是一个表达式，可以赋值给变量，对象声明不是表达式，不能用于赋值

    对象声明可包含嵌套类，不能包含内部类，对象表达式可包含内部内，不能包含嵌套类


    对象声明不能定义在函数和方法中，但对象表达式可嵌套在其他对象声明或非内部类中


作用 ：对象声明专门用于实现单例



3   伴生对象和静态成员


在类中定义的对象声明可以使用companion修饰，这样该对象就变成了伴生对象。

每个类中最多只能定义一个伴生对象，伴生对象相当于外部类的对象，程序可以通过外部类直接调用
伴生对象的成员



4  伴生对象的扩展








